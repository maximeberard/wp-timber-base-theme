{"version":3,"sources":["utils/debounce.js"],"names":["debounce","func","wait","immediate","timeout","context","args","later","apply","callNow","clearTimeout","setTimeout"],"mappings":";;;;;;YAagBA,Q,GAAAA,Q;AAbhB;;;;;;;;;;;;;AAaO,aAASA,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,SAA9B,EAAyC;AAAA;AAAA;;AAC5C,YAAIC,gBAAJ;AACA,eAAO,YAAM;AACT,gBAAMC,eAAN;AAAA,gBAAsBC,iBAAtB;AACA,gBAAMC,QAAQ,SAARA,KAAQ,GAAM;AAChBH,0BAAU,IAAV;AACA,oBAAI,CAACD,SAAL,EAAgBF,KAAKO,KAAL,CAAWH,OAAX,EAAoBC,IAApB;AACnB,aAHD;AAIA,gBAAMG,UAAUN,aAAa,CAACC,OAA9B;AACAM,yBAAaN,OAAb;AACAA,sBAAUO,WAAWJ,KAAX,EAAkBL,IAAlB,CAAV;AACA,gBAAIO,OAAJ,EAAaR,KAAKO,KAAL,CAAWH,OAAX,EAAoBC,IAApB;AAChB,SAVD;AAWH","file":"debounce.js","sourcesContent":["/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered.\n *\n * The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n *\n * @see   http://davidwalsh.name/javascript-debounce-function\n * @param {Function} func     [function to debounce]\n * @param {Number} wait       [time to wait]\n * @param {Boolean} immediate []\n */\nexport function debounce(func, wait, immediate) {\n    let timeout;\n    return () => {\n        const context = this, args = arguments;\n        const later = () => {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n}\n"]}